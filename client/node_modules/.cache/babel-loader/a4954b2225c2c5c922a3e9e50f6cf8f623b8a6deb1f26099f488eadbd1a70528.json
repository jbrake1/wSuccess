{"ast":null,"code":"var _jsxFileName = \"/Users/jimmybrake/Documents/wild success 2/project-management-tool/client/src/pages/Groups.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useAuth } from '../context/AuthContext.tsx';\nimport api from '../services/api.ts';\nimport { toast } from 'react-toastify';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Groups = () => {\n  _s();\n  const {\n    user\n  } = useAuth();\n  const [groups, setGroups] = useState([]);\n  const [newGroupName, setNewGroupName] = useState('');\n  useEffect(() => {\n    if (user) {\n      api.get('/groups').then(response => setGroups(response.data)).catch(() => toast.error('Failed to load groups'));\n    }\n  }, [user]);\n  const handleCreateGroup = async e => {\n    e.preventDefault();\n    try {\n      const {\n        data\n      } = await api.post('/groups', {\n        name: newGroupName\n      });\n      setGroups([...groups, data]);\n      setNewGroupName('');\n      toast.success('Group created successfully');\n    } catch (err) {\n      toast.error('Failed to create group');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"groups-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Groups\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleCreateGroup,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"New group name\",\n        value: newGroupName,\n        onChange: e => setNewGroupName(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Create Group\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"groups-list\",\n      children: groups.map(group => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"group-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: group.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: group.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 13\n        }, this)]\n      }, group._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n_s(Groups, \"zKZTgt8rgeHT6zwvPskFLoighCE=\", false, function () {\n  return [useAuth];\n});\n_c = Groups;\nexport default Groups;\nvar _c;\n$RefreshReg$(_c, \"Groups\");","map":{"version":3,"names":["React","useState","useEffect","useAuth","api","toast","jsxDEV","_jsxDEV","Groups","_s","user","groups","setGroups","newGroupName","setNewGroupName","get","then","response","data","catch","error","handleCreateGroup","e","preventDefault","post","name","success","err","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","placeholder","value","onChange","target","required","map","group","description","_id","_c","$RefreshReg$"],"sources":["/Users/jimmybrake/Documents/wild success 2/project-management-tool/client/src/pages/Groups.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\ninterface Group {\n  _id: string;\n  name: string;\n  description?: string;\n  admin: string;\n  members: string[];\n  pendingInvites: {\n    email: string;\n    token: string;\n    expiresAt: string;\n  }[];\n}\nimport { useAuth } from '../context/AuthContext.tsx';\nimport api from '../services/api.ts';\nimport { toast } from 'react-toastify';\n\nconst Groups = () => {\n  const { user } = useAuth();\n  const [groups, setGroups] = useState<Group[]>([]);\n  const [newGroupName, setNewGroupName] = useState('');\n\n  useEffect(() => {\n    if (user) {\n      api.get('/groups')\n        .then(response => setGroups(response.data))\n        .catch(() => toast.error('Failed to load groups'));\n    }\n  }, [user]);\n\n  const handleCreateGroup = async (e: React.FormEvent) => {\n    e.preventDefault();\n    try {\n      const { data } = await api.post('/groups', { name: newGroupName });\n      setGroups([...groups, data]);\n      setNewGroupName('');\n      toast.success('Group created successfully');\n    } catch (err) {\n      toast.error('Failed to create group');\n    }\n  };\n\n  return (\n    <div className=\"groups-container\">\n      <h2>Groups</h2>\n      <form onSubmit={handleCreateGroup}>\n        <input\n          type=\"text\"\n          placeholder=\"New group name\"\n          value={newGroupName}\n          onChange={(e) => setNewGroupName(e.target.value)}\n          required\n        />\n        <button type=\"submit\">Create Group</button>\n      </form>\n\n      <div className=\"groups-list\">\n        {groups.map(group => (\n          <div key={group._id} className=\"group-item\">\n            <h3>{group.name}</h3>\n            <p>{group.description}</p>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Groups;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}